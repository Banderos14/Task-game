import React, { useState, useEffect } from "react";
import axios from "axios";
import HabitItem from "./HabitItem";
import AddHabitModal from "./HabitModal";

const HabitList = ({ userId }) => {
  const [habits, setHabits] = useState([]);
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    if (!userId) {
      console.log("‚ùå –ù–µ—Ç userId, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏.");
      return;
    }

    console.log("üü¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≤—ã—á–∫–∏ –¥–ª—è userId:", userId);

    axios.get(`http://localhost:5000/api/habits/${userId}`)
      .then(response => {
        console.log("üìå –ü–æ–ª—É—á–µ–Ω—ã –ø—Ä–∏–≤—ã—á–∫–∏:", response.data);
        setHabits(response.data);
      })
      .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≤—ã—á–µ–∫:", error));
  }, [userId]);

  const toggleHabit = async (habitId) => {
    try {
        const response = await axios.post("http://localhost:5000/api/habits/toggle", { habitId, userId });
        const updatedHabits = habits.map(habit =>
            habit._id === habitId ? { ...habit, completed: response.data.habit.completed } : habit
        );
        setHabits(updatedHabits);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏:", error);
        alert(error.response?.data?.message || "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–∏–≤—ã—á–∫–∏");
    }
};

  return (
    <div className="p-4 bg-white shadow-lg rounded-lg">
      <h2 className="text-xl font-bold mb-4">–°–ø–∏—Å–æ–∫ –ø—Ä–∏–≤—ã—á–µ–∫</h2>
      <button
        onClick={() => setIsModalOpen(true)}
        className="px-4 py-2 bg-blue-500 text-white rounded-lg mb-4"
      >
        –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤—ã—á–∫—É
      </button>
      <AddHabitModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        onHabitAdded={(newHabit) => {
          const updatedHabits = [...habits, newHabit];
          setHabits(updatedHabits);
        }}
        userId={userId}
      />
      {habits.length > 0 ? (
        habits.map((habit) => (
          <HabitItem
            key={habit._id} // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á
            habit={habit}
            toggleHabit={toggleHabit}
            deleteHabit={(habitId) => {
              const updatedHabits = habits.filter(habit => habit._id !== habitId);
              setHabits(updatedHabits);
            }}
            onUpdateHabit={(updatedHabit) => {
              const updatedHabits = habits.map(habit => (habit._id === updatedHabit._id ? updatedHabit : habit));
              setHabits(updatedHabits);
            }}
          />
        ))
      ) : (
        <p className="text-gray-500">–ù–µ—Ç –ø—Ä–∏–≤—ã—á–µ–∫ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>
      )}
    </div>
  );
};

export default HabitList;
import React, { useState, useEffect } from "react";
import axios from "axios";
import TaskItem from "./TaskItem";

const TaskList = ({ userId }) => {
  const [tasks, setTasks] = useState([]);
  const [xp, setXp] = useState(0);
  const [newTaskText, setNewTaskText] = useState("");
  const [filter, setFilter] = useState("all");

  // ‚úÖ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –∏ XP –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ userId
  useEffect(() => {
    if (!userId) {
      console.log("‚ùå –ù–µ—Ç userId, –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏.");
      return;
    }

    console.log("üü¢ –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è userId:", userId);

    axios.get(`http://localhost:5000/api/tasks/${userId}`)
      .then(response => {
        console.log("üìå –ü–æ–ª—É—á–µ–Ω—ã –∑–∞–¥–∞—á–∏:", response.data);
        setTasks(response.data);
      })
      .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á:", error));

    axios.get(`http://localhost:5000/api/auth/me`, { headers: { Authorization: `Bearer ${localStorage.getItem("token")}` }})
      .then(response => {
        console.log("üìå –ü–æ–ª—É—á–µ–Ω XP:", response.data.xp);
        setXp(response.data.xp);
      })
      .catch(error => console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ XP:", error));
  }, [userId]);

  // ‚úÖ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á
  const filteredTasks = tasks.filter((task) => {
    if (filter === "completed") return task.completed;
    if (filter === "active") return !task.completed;
    return true; // "all" - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏
  });

  // ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ (—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î)
  const handleAddTask = async (e) => {
    e.preventDefault();
    if (!newTaskText.trim() || !userId) return;

    try {
      const response = await axios.post("http://localhost:5000/api/tasks/add", { text: newTaskText, userId });
      setTasks([...tasks, response.data]);
      setNewTaskText("");
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
    }
  };

  // ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ XP)
  const toggleTask = async (taskId) => {
    try {
      const response = await axios.post("http://localhost:5000/api/tasks/toggle", { taskId, userId });
      setTasks(tasks.map(task => (task._id === taskId ? response.data.task : task)));
      setXp(response.data.xp);
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
    }
  };

  // ‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
  const deleteTask = async (taskId) => {
    try {
      await axios.delete(`http://localhost:5000/api/tasks/delete/${taskId}/${userId}`);
      setTasks(tasks.filter(task => task._id !== taskId));
    } catch (error) {
      console.error("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:", error);
    }
  };

  return (
    <div className="p-4 bg-white shadow-lg rounded-lg">
      <h2 className="text-xl font-bold mb-4">–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á</h2>

      {/* ‚úÖ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º XP */}
      <div className="mb-4 text-green-600 font-bold">XP: {xp}</div>

      {/* ‚úÖ –§–æ—Ä–º–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ */}
      <form onSubmit={handleAddTask} className="mb-4">
        <input
          type="text"
          className="p-2 border rounded-lg w-full mb-2"
          value={newTaskText}
          onChange={(e) => setNewTaskText(e.target.value)}
          placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É"
        />
        <button type="submit" className="px-4 py-1 bg-blue-500 text-white rounded-lg">
          –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        </button>
      </form>

      {/* ‚úÖ –§–∏–ª—å—Ç—Ä—ã */}
      <div className="mb-4">
        <button
          onClick={() => setFilter("all")}
          className={`px-4 py-1 mr-2 rounded-lg ${
            filter === "all" ? "bg-blue-500 text-white" : "bg-gray-200"
          }`}
        >
          –í—Å–µ
        </button>
        <button
          onClick={() => setFilter("active")}
          className={`px-4 py-1 mr-2 rounded-lg ${
            filter === "active" ? "bg-blue-500 text-white" : "bg-gray-200"
          }`}
        >
          –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        </button>
        <button
          onClick={() => setFilter("completed")}
          className={`px-4 py-1 rounded-lg ${
            filter === "completed" ? "bg-blue-500 text-white" : "bg-gray-200"
          }`}
        >
          –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
        </button>
      </div>

      {/* ‚úÖ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á */}
      {filteredTasks.length > 0 ? (
        filteredTasks.map((task) => (
          <TaskItem
            key={task._id}
            task={task}
            toggleTask={toggleTask}
            deleteTask={deleteTask}
          />
        ))
      ) : (
        <p className="text-gray-500">–ù–µ—Ç –∑–∞–¥–∞—á –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.</p>
      )}
    </div>
  );
};

export default TaskList;
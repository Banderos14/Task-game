const express = require("express");
const User = require("../models/User");

const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥—Ä—É–∑–µ–π
router.get("/:userId", async (req, res) => {
    try {
        const { userId } = req.params;

        const user = await User.findById(userId).populate("friends", "username email xp level");
        if (!user) {
            return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        res.json(user.friends);
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥—Ä—É–∑–µ–π:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
router.post("/add-friend", async (req, res) => {
    try {
        const { userId, friendId } = req.body;

        if (!userId || !friendId) {
            return res.status(400).json({ message: "‚ùå userId –∏ friendId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
        }

        const user = await User.findById(userId);
        const friend = await User.findById(friendId);

        if (!user || !friend) {
            return res.status(404).json({ message: "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }

        if (user.friends.includes(friendId)) {
            return res.status(400).json({ message: "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –¥—Ä—É–∑—å—è—Ö" });
        }

        user.friends.push(friendId);
        friend.friends.push(userId);

        await user.save();
        await friend.save();

        res.json({ message: "‚úÖ –î—Ä—É–≥ –¥–æ–±–∞–≤–ª–µ–Ω", friend });
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

// –£–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞
router.post("/remove-friend", async (req, res) => {
    const { userId, friendId } = req.body;

    console.log("üìå –ó–∞–ø—Ä–æ—Å –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –¥—Ä—É–≥–∞:", { userId, friendId });

    if (!userId || !friendId) {
        return res.status(400).json({ message: "‚ùå userId –∏ friendId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
    }

    try {
        const user = await User.findById(userId);
        const friend = await User.findById(friendId);

        if (!user) {
            return res.status(404).json({ message: `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${userId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }
        if (!friend) {
            return res.status(404).json({ message: `‚ùå –î—Ä—É–≥ ${friendId} –Ω–µ –Ω–∞–π–¥–µ–Ω` });
        }

        if (!user.friends.includes(friendId)) {
            return res.status(400).json({ message: "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –¥—Ä—É–∑–µ–π" });
        }

        await User.findByIdAndUpdate(userId, { $pull: { friends: friendId } });
        await User.findByIdAndUpdate(friendId, { $pull: { friends: userId } });

        console.log("‚úÖ –î—Ä—É–≥ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω:", friendId);
        res.json({ message: "‚úÖ –î—Ä—É–≥ —É–¥–∞–ª–µ–Ω" });
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –¥—Ä—É–≥–∞:", error);
        res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
});

module.exports = router;